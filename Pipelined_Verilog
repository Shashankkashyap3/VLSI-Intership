module pipeline_cpu(input clk);

    // Registers
    reg [15:0] instr_mem [0:15]; // 16 instructions
    reg [7:0] reg_file [0:15];   // 16 registers
    reg [7:0] data_mem [0:255];  // Data memory

    // Pipeline registers
    reg [15:0] IF_ID, ID_EX;
    reg [7:0] EX_WB_result;
    reg [3:0] EX_WB_dest;
    reg       EX_WB_wen;

    integer pc = 0;

    // Fetch stage
    always @(posedge clk) begin
        IF_ID <= instr_mem[pc];
        pc <= pc + 1;
    end

    // Decode stage
    reg [3:0] opcode, rd, rs1, rs2;
    reg [7:0] reg_a, reg_b;
    always @(posedge clk) begin
        opcode <= IF_ID[15:12];
        rd     <= IF_ID[11:8];
        rs1    <= IF_ID[7:4];
        rs2    <= IF_ID[3:0];
        reg_a  <= reg_file[IF_ID[7:4]];
        reg_b  <= reg_file[IF_ID[3:0]];
        ID_EX  <= IF_ID;
    end

    // Execute stage
    reg [7:0] alu_result;
    always @(posedge clk) begin
        case (opcode)
            4'b0000: alu_result <= reg_a + reg_b; // ADD
            4'b0001: alu_result <= reg_a - reg_b; // SUB
            4'b0010: alu_result <= data_mem[reg_a + rs2]; // LOAD
            default: alu_result <= 0;
        endcase
        EX_WB_result <= alu_result;
        EX_WB_dest <= rd;
        EX_WB_wen <= (opcode == 4'b0000 || opcode == 4'b0001 || opcode == 4'b0010);
    end

    // Write Back stage
    always @(posedge clk) begin
        if (EX_WB_wen)
            reg_file[EX_WB_dest] <= EX_WB_result;
    end

    // Initial setup
    initial begin
        // Clear memories
        integer i;
        for (i = 0; i < 16; i++) begin
            instr_mem[i] = 16'b0;
            reg_file[i] = 8'b0;
        end
        for (i = 0; i < 256; i++) data_mem[i] = i;

        // Load instructions:
        // ADD R1 = R2 + R3
        // SUB R4 = R1 - R2
        // LOAD R5 = MEM[R4 + 2]
        instr_mem[0] = {4'b0000, 4'd1, 4'd2, 4'd3}; // ADD R1, R2, R3
        instr_mem[1] = {4'b0001, 4'd4, 4'd1, 4'd2}; // SUB R4, R1, R2
        instr_mem[2] = {4'b0010, 4'd5, 4'd4, 4'd2}; // LOAD R5, [R4 + 2]

        // Init register values
        reg_file[2] = 8'd10;
        reg_file[3] = 8'd5;
    end

endmodule
